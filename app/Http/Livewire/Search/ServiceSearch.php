<?php

namespace App\Http\Livewire\Search;

use App\Models\Part;
use App\Models\Service;
use Livewire\Component;
use Livewire\WithPagination;

class ServiceSearch extends Component
{

    use WithPagination;

    public $search="";
    public $dept=null;
    public $parts=[];
    public $part=null;
    public $pre_page=8;
    public $orderby="updated_at";
    public $ordertype="desc";

    protected $listeners=[
        'setDept'=>'set_dept',
        'setParts'=>'set_parts'
    ];
    public function getQueryString()
    {

        return ['search'=>$this->search,'page',
        'part'=>$this->part,
        'parts'=>$this->parts,
        'dept'=>$this->dept,
    'ordertype'=>$this->ordertype,'orderby'=>$this->ordertype]; // TODO: Change the autogenerated stub
    }

    protected $queryString=['search','page','parts','dept','part','orderby','ordertype'];


    public function mount($search="",$dept=null,array $parts=[],$part="",$orderby="updated_at",$ordertype="desc")
    {
        $this->search=$search;
        $this->dept=$dept;
        $this->parts=$parts;
        $this->part=$part;
        $this->orderby=$orderby;
        $this->ordertype=$ordertype;
        # code...
    }



    public function set_dept($value)
    {
        $this->dept=$value;
        $this->parts=[];
        $this->part='';
        $this->resetPage('page');

        # code...
    }
    public function delete_part($value)
    {
        $arr=[];
        foreach($this->parts as $k=>$v){
            if($v!=$value)
            $arr[]=$v;
        }
        $this->parts=$arr;
    }
    public function set_parts($value)
    {
        $this->parts=array_merge( $value,$this->parts);
    }



    public function render()
    {
        $products=[];
        $from = date('2018-01-01');
        $to = date('2019-05-02');





        if($this->part!=''){
            $p=Part::find($this->part);
            $allparts=$p->department->parts;
        $selectedParts=Part::where('id',$this->part)->get();

        $products=Service::with('parts','department','owner')
        ->withAvg('ratings:value')
        ->withCount('ratings')
        ->where(function($query){
                $query->where('name','LIKE','%'.$this->search.'%')
                ->Orwhere('discrip','LIKE','%'.$this->search.'%')
                ->Orwhere('note','LIKE','%'.$this->search.'%');

        })->whereHas(
            'parts',function ($query)use($selectedParts){
                $query->where('id','=',$this->part);
        }
        )->orderBy($this->orderby,$this->ordertype)->paginate($this->pre_page);


        }
        else{



        if($this->dept!=null &&$this->dept!='any' ){

            $allparts=Part::where('department_id','=',$this->dept)->get();
            $selectedParts=Part::whereIn('id',$this->parts!=null?$this->parts:Part::where('department_id','=',$this->dept)->pluck('id')->toArray())->get();
            if($this->parts==null)
            $this->parts=$selectedParts->pluck('id')->toArray();

            $products=Service::
            with('parts','department','owner:id,name,username,avatar')
            ->withAvg('ratings:value')
            ->withCount('ratings')
            ->where('department_id',"=",$this->dept)
            ->where(function($query){
                $query->where('department_id',"=",$this->dept)->Orwhere(function($query){
                    $query->where('name','LIKE','%'.$this->search.'%')
                    ->Orwhere('discrip','LIKE','%'.$this->search.'%')
                    ->Orwhere('note','LIKE','%'.$this->search.'%');
                });
            })->OrwhereHas(
                'parts',function ($query)use($selectedParts){
                    $query->whereIn('id',$selectedParts->pluck('id')->toArray());
            }
            )->orderBy($this->orderby,$this->ordertype)->paginate($this->pre_page);
        }
        else if($this->dept==="any"){

            $allparts=Part::whereHas('department',function($query){$query->where('type',2);})->get();
        $selectedParts=Part::whereIn('id',$this->parts!=null?$this->parts:Part::whereHas('department',function($query){$query->where('type',2);})->inRandomOrder()->take(rand(4,5))->pluck('id')->toArray())->get();

            $products=Service::with('parts','department','owner')
            ->withAvg('ratings:value')
            ->withCount('ratings')
            ->where(function($query){
                    $query->where('name','LIKE','%'.$this->search.'%')
                    ->Orwhere('discrip','LIKE','%'.$this->search.'%')
                    ->Orwhere('note','LIKE','%'.$this->search.'%');

            })->whereHas(
                'parts',function ($query)use($selectedParts,$allparts){
                    $query->whereIn('id',$selectedParts->pluck('id')->toArray())->orWhereIn('id',$allparts->pluck('id')->toArray());
            }
            )->orderBy($this->orderby,$this->ordertype)->paginate($this->pre_page);

        }

    }


        return view('livewire.search.service-search',['products'=>$products,'selectedParts'=>$selectedParts,'allparts'=>$allparts]);
    }

    public function change_orderby($orderby,$ordertype){
        $this->orderby=$orderby;
        $this->ordertype=$ordertype;

    }
   public function set_part($id)
   {
    $this->part=$id;
    # code...
   }






}
